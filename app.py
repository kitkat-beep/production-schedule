import pandas as pd
import streamlit as st
from io import BytesIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DAYS_IN_MONTH = 28
NORM_HOURS = 160
WORK_GROUPS = ['–ì–†1', '–ì–†2', '–ì–†3', '–ì–†4', '–æ—Ñ–∏—Å']

# –®–∞–±–ª–æ–Ω—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
SCHEDULE_TEMPLATES = {
    '–ì—Ä–∞—Ñ–∏–∫1': [11.5, 11.5, "", 11.5, 11.5, "", "", "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫2': [11.5, 7.5, "", "", 11.5, 11.5, "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫3': ["", 11.5, 11.5, "", "", "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫4': ["", "", 11.5, 11.5, "", 11.5, 11.5],
    '–û—Ñ–∏—Å': [8, 8, 8, 8, 8]
}

class EmployeeSchedule:
    def __init__(self, name, group, schedule_type, exceptions=None):
        self.name = name
        self.group = group
        self.schedule_type = schedule_type
        self.exceptions = exceptions or {}

    def generate_schedule(self):
        base_pattern = SCHEDULE_TEMPLATES[self.schedule_type]
        schedule = {}
        
        pattern_index = 0
        for day in range(1, DAYS_IN_MONTH+1):
            day_str = str(day)
            if day_str in self.exceptions:
                schedule[day_str] = self.exceptions[day_str]
            else:
                schedule[day_str] = base_pattern[pattern_index % len(base_pattern)]
                pattern_index += 1
        
        total = sum(
            float(h) if isinstance(h, (int, float, str)) and str(h).replace('.', '').isdigit() 
            else 0 
            for h in schedule.values()
        )
        
        return {
            '–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã': self.name,
            '–ì–† ‚Ññ': self.group,
            **schedule,
            '–§–∞–∫—Ç –§–†–í': round(total, 1),
            '–æ—Ç –§–†–í': round(total - NORM_HOURS, 1)
        }

def create_schedule():
    employees = [
        # –ì—Ä–∞—Ñ–∏–∫ ‚Ññ1
        EmployeeSchedule("–§–µ–æ–∫—Ç–∏—Å—Ç–æ–≤–∞ –ï.–ê.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'12': "–ì–û", '27': 4}),
        EmployeeSchedule("–¢—Ä–µ—Ç—å—è–∫–æ–≤ –ê.–ò.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–ì—Ä–∞—á–µ–≤–∞ –¢.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–ë–µ–ª–æ—É—Å–æ–≤ –ê.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'12': "–ì–û"}),
        EmployeeSchedule("–î–∞–≤—ã–¥–æ–≤–∞ –°.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–°–∞—Ä–∞–Ω—Ü–µ–≤ –ê.–ù. —É—á–µ–Ω–∏–∫", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'6': "—É–≤"}),

        # –ì—Ä–∞—Ñ–∏–∫ ‚Ññ2
        EmployeeSchedule("–ü–∞–Ω—Ñ–∏–ª–æ–≤ –ê.–í.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2", {'22': "–≥–æ"}),
        EmployeeSchedule("–°–≤–∏—Ä–∏–¥–æ–≤ –ê.–û. (—Å—Ç–∞–∂–µ—Ä)", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–°–º–∏—Ä–Ω–æ–≤ –ù.–ù.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–°–∏–Ω—è–∫–∏–Ω–∞ –°.–ê.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–ü–∞–Ω—Ç—é—Ö–∏–Ω –ê.–î.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2", {'23': "–≥–æ"}),
        EmployeeSchedule("–î–∞–≤—ã–¥–æ–≤–∞ –û.–ò.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–†–æ–º–µ–Ω—Å–∫–∏–π –†.–°.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),

        # –ì—Ä–∞—Ñ–∏–∫ ‚Ññ3
        EmployeeSchedule("–õ—É–∫–∞—à–µ–Ω–∫–æ–≤–∞ –°.–í.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3"),
        EmployeeSchedule("–†–∞–∫—É –û.–ê.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3", {'8': "–±/–ª"}),
        EmployeeSchedule("–ú–∏—Ö–µ–µ–≤–∞ –ê.–í.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3", {'15': "–ì–û"}),
        EmployeeSchedule("–ê–Ω—Ç–∏–ø–µ–Ω–∫–æ –í.–ù.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3"),

        # –ì—Ä–∞—Ñ–∏–∫ ‚Ññ4
        EmployeeSchedule("–Æ–¥–∏–Ω–∞ –ò.–ï.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),
        EmployeeSchedule("–õ–∏—Å–æ–≤—Å–∫–∞—è –¢.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'4': "–±/–ª"}),
        EmployeeSchedule("–ì–∞–ª–∫–∏–Ω–∞ –í.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'11': "–±/–ª"}),
        EmployeeSchedule("–ù–µ–∑–±—É–¥–µ–µ–≤ –î.–°.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),
        EmployeeSchedule("–°–º–æ–ª—è–∫–æ–≤ –ê.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'12': "–ì–û"}),
        EmployeeSchedule("–î–æ–ª–≥–æ–∞—Ä—à–∏–Ω–Ω–Ω—ã—Ö –¢.–†.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),

        # –û—Ñ–∏—Å
        EmployeeSchedule("–ü–æ–¥–≥–æ—Ä–±—É–Ω—Å–∫–∏–π –î.–ê.", "–æ—Ñ–∏—Å", "–û—Ñ–∏—Å")
    ]
    
    return pd.DataFrame([e.generate_schedule() for e in employees])

def validate_data(df):
    errors = []
    valid_marks = ['', '–ì–û', '–±/–ª', '—É–≤', '–≥–æ']
    for idx, row in df.iterrows():
        for day in range(1, DAYS_IN_MONTH+1):
            value = row[str(day)]
            if not (isinstance(value, (int, float)) or (str(value) in valid_marks)):
                errors.append(f"–û—à–∏–±–∫–∞: {row['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã']} –¥–µ–Ω—å {day} - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{value}'")
    return errors

def main():
    st.set_page_config(layout="wide")
    st.title("üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Ü–µ—Ö–∞ –ú–∏–ñ –ì–õ–§")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    schedule_df = create_schedule()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
    selected_groups = st.sidebar.multiselect("–ì—Ä—É–ø–ø—ã", WORK_GROUPS)
    show_overtime = st.sidebar.checkbox("–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if selected_groups:
        schedule_df = schedule_df[schedule_df['–ì–† ‚Ññ'].isin(selected_groups)]
        
    if show_overtime:
        schedule_df = schedule_df[schedule_df['–æ—Ç –§–†–í'] > 0]
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    errors = validate_data(schedule_df)
    if errors:
        st.error("–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:")
        for error in errors:
            st.write(f"‚ö†Ô∏è {error}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.header("–¢–∞–±–µ–ª—å —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    styled_df = schedule_df.style.applymap(
        lambda x: 'background-color: #FFE4E1' if isinstance(x, (int, float)) and x > NORM_HOURS else '',
        subset=[str(d) for d in range(1, DAYS_IN_MONTH+1)]
    )
    st.dataframe(styled_df, height=800, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", len(schedule_df))
    with col2:
        avg_hours = schedule_df['–§–∞–∫—Ç –§–†–í'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{avg_hours:.1f} —á")
    with col3:
        overtime_count = len(schedule_df[schedule_df['–æ—Ç –§–†–í'] > 0])
        st.metric("–° –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π", f"{overtime_count} —á–µ–ª")
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    st.sidebar.header("–≠–∫—Å–ø–æ—Ä—Ç")
    export_format = st.sidebar.selectbox("–§–æ—Ä–º–∞—Ç", ["Excel", "CSV"])
    
    if st.sidebar.button("–°–∫–∞—á–∞—Ç—å"):
        output = BytesIO()
        if export_format == "Excel":
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                schedule_df.to_excel(writer, index=False)
            mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            file_ext = "xlsx"
        else:
            output.write(schedule_df.to_csv(index=False).encode('utf-8'))
            mime_type = "text/csv"
            file_ext = "csv"
        
        st.sidebar.download_button(
            label=f"–°–∫–∞—á–∞—Ç—å ({export_format})",
            data=output.getvalue(),
            file_name=f"–≥—Ä–∞—Ñ–∏–∫_—Ä–∞–±–æ—Ç—ã.{file_ext}",
            mime=mime_type
        )

if __name__ == "__main__":
    main()